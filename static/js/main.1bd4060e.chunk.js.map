{"version":3,"sources":["components/SelectChartStart/SelectChartStart.module.css","components/LineChart/Line.module.css","components/DoughnutChart/Doughnut.module.css","pages/Charts/Charts.module.css","components/SelectChartStart/SelectChartStart.js","components/LineChart/Line.js","components/DoughnutChart/Doughnut.js","pages/Charts/functionsCharts.js","pages/Charts/Charts.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","SelectChartStart","props","className","styles","chartSelect","value","onChange","Line","chartRef","React","createRef","this","initialChart","prevProps","data","startDate","ctx","current","getContext","myChart","id","undefined","window","destroy","Chart","type","options","responsive","hover","mode","intersect","animationDuration","onHover","e","item","length","x","_model","y","bottomY","_yScale","bottom","leftX","_xScale","left","save","beginPath","moveTo","lineTo","globalAlpha","lineWidth","strokeStyle","_options","hoverBackgroundColor","stroke","arc","Math","PI","restore","legend","display","labels","fontColor","padding","title","text","fontSize","position","scales","xAxes","time","unit","displayFormats","year","month","week","day","hour","parser","date","moment","utcOffset","ticks","beginAtZero","min","start","max","maxDate","labelOffset","gridLines","drawOnChartArea","drawTicks","color","yAxes","stacked","stepSize","layout","right","top","tooltips","displayColors","callbacks","tooltipItem","label","xLabel","backgroundColor","titleFontSize","canvas","datasets","colors","forEach","set","i","gradient","createLinearGradient","addColorStop","setGradientColor","borderColor","borderWidth","pointHoverBackgroundColor","radius","pointStyle","originalLineDraw","controllers","line","prototype","draw","helpers","extend","apply","arguments","chart","tooltipFormat","maxTicksLimit","getChartData","ChartLine","ref","Component","Doughnut","originalDoughnutDraw","doughnut","width","height","config","innerRadius","textAlign","font","imageSmoothingEnabled","textBaseline","fillStyle","meta","getDatasetMeta","map","index","hidden","fillText","cutoutPercentage","elements","horizontalAlign","onClick","legendItem","defaults","call","align","fullWidth","legendHitBoxes","boxWidth","boxHeight","DoughnutChart","getAllChartData","datesFullList","allMonths","allDays","allHours","startDay","Date","format","uniqMonths","indexOf","find","element","uniqDates","uniqHours","getDougChartData","itemData","a","Charts","useState","ordersSubscData","setOrdersSubscData","visitorsData","setVisitorsData","dougChartData","setDougChartData","daySelect","setSelectDay","optionState","setOptionState","cheCked","setChecked","useEffect","axios","method","url","headers","Accept","then","result","visitors","today","standartStart","orders","subscriptions","OrdersSubscStartDay","dataDays","dataMonth","dataHour","catch","error","console","thisMonth","startOf","lastMonth","subtract","thisWeek","thisYear","lastYear","initialData","wrapperCharts","optionsChart","ChartSelect","target","checked","getNewDays","selectedDay","maxDay","newDaysVisitors","filter","newDaysOrders","newDaysSubscriptions","getNewData","name","newDays","endOf","add","newStartDay","leftChartsColumn","rightChartsColumn","lastEventsWrapper","lastEvents","slice","reverse","lastEventsPoint","lastEventsPointV","lastEventsPointO","lastEventsPointS","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bd4060e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartSelect\":\"SelectChartStart_chartSelect__3N4jJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartLine\":\"Line_ChartLine__-vWPu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DoughnutChart\":\"Doughnut_DoughnutChart__2llRi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperCharts\":\"Charts_wrapperCharts__3pDH4\",\"optionsChart\":\"Charts_optionsChart__YpB2b\",\"ChartSelect\":\"Charts_ChartSelect__suqrz\",\"leftChartsColumn\":\"Charts_leftChartsColumn__2WwRq\",\"rightChartsColumn\":\"Charts_rightChartsColumn__1E0eE\",\"lastEventsWrapper\":\"Charts_lastEventsWrapper__CFco4\",\"lastEvents\":\"Charts_lastEvents__1kyd_\",\"lastEventsPoint\":\"Charts_lastEventsPoint__2HBsK\",\"lastEventsPointV\":\"Charts_lastEventsPointV__3eDBT\",\"lastEventsPointO\":\"Charts_lastEventsPointO__3KTks\",\"lastEventsPointS\":\"Charts_lastEventsPointS__1UAII\"};","import React from \"react\";\r\nimport styles from \"./SelectChartStart.module.css\"\r\n\r\nexport default function SelectChartStart(props) {\r\n  return (\r\n    \r\n      <select className={styles.chartSelect} value={props.value} onChange={props.onChange}>\r\n        <option value=\"standart\">Shose limitation</option>\r\n        <option value=\"day\">Today</option>\r\n        <option value=\"week\">This Week</option>\r\n        <option value=\"month\">This Month</option>\r\n        <option value=\"monthLast\">Last Month</option>\r\n        <option value=\"year\">This Year</option>\r\n        <option value=\"yearLast\">Last Year</option>\r\n      </select>\r\n \r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport moment from \"moment\";\r\nimport styles from \"./Line.module.css\";\r\n\r\nclass Line extends Component {\r\n  chartRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.initialChart();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.data.startDate !== this.props.data.startDate) {\r\n      this.initialChart();\r\n    }\r\n  }\r\n  initialChart() {\r\n    const ctx = this.chartRef.current.getContext(\"2d\");\r\n\r\n    const setGradientColor = (canvas, color,i) => {\r\n      const gradient = ctx.createLinearGradient(0, 0, 0, 320);\r\n\r\n      gradient.addColorStop(0.6, color);\r\n      gradient.addColorStop(1, this.props.gradient[i]);\r\n\r\n      return gradient;\r\n    };\r\n\r\n    const getChartData = (canvas) => {\r\n      const data = this.props.data;\r\n\r\n      if (data.datasets) {\r\n        let colors = this.props.colors;\r\n        data.datasets.forEach((set, i) => {\r\n          set.backgroundColor = setGradientColor(canvas, colors[i],i);\r\n\r\n          set.borderColor = colors[i];\r\n\r\n          set.borderWidth = 0.5;\r\n\r\n          set.pointHoverBackgroundColor = colors[i];\r\n          set.radius = 0.5;\r\n          set.pointStyle = \"cross\";\r\n        });\r\n        let originalLineDraw = Chart.controllers.line.prototype.draw;\r\n        Chart.helpers.extend(Chart.controllers.line.prototype, {\r\n          draw: function () {\r\n            originalLineDraw.apply(this, arguments);\r\n\r\n            ////tooltipFormat/////\r\n            if (this.chart.options.scales.xAxes[0].time.unit === \"month\") {\r\n              this.chart.options.scales.xAxes[0].time.tooltipFormat = \"MMM'YY\";\r\n              this.chart.options.scales.xAxes[0].ticks.maxTicksLimit = 12;\r\n            } else {\r\n              this.chart.options.scales.xAxes[0].time.tooltipFormat =\r\n                \"DD'MMM  hA\";\r\n            }\r\n          },\r\n        });\r\n      }\r\n\r\n      /////////////////////////////////////\r\n\r\n      return data;\r\n    };\r\n    let myChart = this.props.id;\r\n    if (window[myChart] !== undefined) window[myChart].destroy();\r\n    window[myChart] = new Chart(ctx, {\r\n      type: \"line\",\r\n      options: {\r\n        responsive: true,\r\n        hover: {\r\n          mode: \"nearest\",\r\n\r\n          intersect: false,\r\n          animationDuration: 100,\r\n          onHover: function (e, item) {\r\n            if (item.length) {\r\n              let x = item[0]._model.x;\r\n              let y = item[0]._model.y;\r\n              let bottomY = item[0]._yScale.bottom;\r\n              let leftX = item[0]._xScale.left;\r\n\r\n              ctx.save();\r\n\r\n              ctx.beginPath();\r\n              ctx.moveTo(x, y - 100);\r\n              ctx.lineTo(x, bottomY);\r\n              ctx.moveTo(x + 30, y);\r\n              ctx.lineTo(leftX, y);\r\n              ctx.globalAlpha = 0.6;\r\n              ctx.lineWidth = 1;\r\n              ctx.strokeStyle = item[0]._options.hoverBackgroundColor;\r\n              ctx.stroke();\r\n\r\n              ctx.beginPath();\r\n              ctx.arc(x, y, 6, 0, 2 * Math.PI);\r\n              ctx.lineWidth = 1;\r\n              ctx.strokeStyle = item[0]._options.hoverBackgroundColor;\r\n              ctx.stroke();\r\n              ctx.beginPath();\r\n              ctx.arc(x, y, 3, 0, 2 * Math.PI);\r\n              ctx.lineWidth = 1;\r\n              ctx.strokeStyle = item[0]._options.hoverBackgroundColor;\r\n              ctx.stroke();\r\n              ctx.restore();\r\n            }\r\n          },\r\n        },\r\n        legend: {\r\n          display: this.props.legend,\r\n          labels: {\r\n            fontColor: \"#fff\",\r\n            padding: 30,\r\n          },\r\n        },\r\n\r\n        title: {\r\n          display: true,\r\n          text: this.props.title,\r\n          fontColor: \"#fff\",\r\n          fontSize: 20,\r\n          position: \"top\",\r\n          padding: 0,\r\n        },\r\n\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: \"time\",\r\n\r\n              time: {\r\n                unit: this.props.unit,\r\n\r\n                displayFormats: {\r\n                  year: \"MMM'YY\",\r\n                  month: \"MMM'YY\",\r\n                  week: \"ddd'DD\",\r\n                  day: \"DD'MMM\",\r\n                  hour: \"DD' hA\",\r\n                },\r\n              },\r\n              parser: function (date) {\r\n                return moment(date).utcOffset(\"+0100\");\r\n              },\r\n\r\n              ticks: {\r\n                beginAtZero: true,\r\n                fontColor: \"#fff\",\r\n                min: this.props.start,\r\n                max: this.props.maxDate,\r\n\r\n                padding: 20,\r\n                labelOffset: 2,\r\n              },\r\n\r\n              gridLines: {\r\n                drawOnChartArea: false,\r\n                drawTicks: false,\r\n\r\n                color: \"#fff\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: \"linear\",\r\n\r\n              stacked: true,\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                beginAtZero: true,\r\n                min: 0,\r\n                stepSize: this.props.stepSize,\r\n                fontColor: \"#fff\",\r\n\r\n                padding: 20,\r\n              },\r\n              gridLines: {\r\n                drawOnChartArea: false,\r\n                drawTicks: false,\r\n\r\n                color: \"#fff\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n\r\n        layout: {\r\n          padding: {\r\n            left: 10,\r\n            right: 0,\r\n            top: 50,\r\n            bottom: 0,\r\n          },\r\n        },\r\n        tooltips: {\r\n          intersect: false,\r\n          displayColors: false,\r\n          callbacks: {\r\n            title: function (tooltipItem, data) {\r\n              return tooltipItem[0].value + \",0\";\r\n            },\r\n            label: function (tooltipItem) {\r\n              return tooltipItem.xLabel;\r\n            },\r\n          },\r\n          backgroundColor: \"transparent\",\r\n          titleFontSize: 15,\r\n        },\r\n      },\r\n      data: getChartData(),\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={styles.ChartLine}>\r\n        <canvas id={\"mycanvas\"} ref={this.chartRef}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Line;\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport styles from \"./Doughnut.module.css\";\r\n\r\nclass Doughnut extends Component {\r\n  chartRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.initialChart();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.data !== this.props.data) {\r\n      this.initialChart();\r\n    }\r\n  }\r\n  initialChart() {\r\n    const ctx = this.chartRef.current.getContext(\"2d\");\r\n\r\n    let originalDoughnutDraw = Chart.controllers.doughnut.prototype.draw;\r\n    Chart.helpers.extend(Chart.controllers.doughnut.prototype, {\r\n      draw: function () {\r\n        originalDoughnutDraw.apply(this, arguments);\r\n\r\n        let chart = this.chart.chart;\r\n        let ctx = chart.ctx;\r\n        let width = chart.width;\r\n        let height = chart.height;\r\n        chart.config.data.radius = \"100%\";\r\n        chart.config.data.innerRadius = \"80%\";\r\n\r\n        ctx.textAlign = \"center\";\r\n\r\n        ctx.font = 40 + \"px Verdana\";\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.lineWidth = 2;\r\n\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = \"#fff\";\r\n\r\n        let meta = this.chart.getDatasetMeta(0);\r\n        let text = 0;\r\n\r\n        this.chart.config.data.datasets[0].data.map((item, index) => {\r\n          let hide = meta.data[index].hidden;\r\n          if (hide === true) {\r\n            return;\r\n          } else {\r\n            return (text = text + item);\r\n          }\r\n        });\r\n\r\n        ctx.fillText(text, width / 2 - 70, height / 2 + 25);\r\n      },\r\n    });\r\n\r\n    let myChart = this.props.id;\r\n    if (window[myChart] !== undefined) window[myChart].destroy();\r\n    window[myChart] = new Chart(ctx, {\r\n      type: \"doughnut\",\r\n      data: this.props.data,\r\n      options: {\r\n        cutoutPercentage: 70,\r\n        responsive: true,\r\n\r\n        elements: {\r\n          arc: {\r\n            borderWidth: 0,\r\n          },\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: this.props.title,\r\n          position: \"top\",\r\n          fontColor: \"#fff\",\r\n          horizontalAlign: \"right\",\r\n          fontSize: 20,\r\n        },\r\n        legend: {\r\n          display: true,\r\n          onClick: function (e, legendItem) {\r\n            Chart.defaults.doughnut.legend.onClick.call(this, e, legendItem);\r\n          },\r\n\r\n          position: \"right\",\r\n          align: \"center\",\r\n          fullWidth: false,\r\n          legendHitBoxes: {\r\n            left: 0,\r\n          },\r\n          labels: {\r\n            fontColor: \"#fff\",\r\n            fontSize: 14,\r\n            padding: 30,\r\n            boxWidth: 4,\r\n            boxHeight: 15,\r\n          },\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              return data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]];\r\n            },\r\n          },\r\n          backgroundColor: \"rgba(29, 62, 78,1)\",\r\n        },\r\n      },\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={styles.DoughnutChart}>\r\n        <canvas id=\"mycanvas\" ref={this.chartRef}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Doughnut;\r\n","import moment from \"moment\";\r\nexport function getAllChartData(data) {\r\n  let datesFullList = [];\r\n  let allMonths = [];\r\n  let allDays = [];\r\n  let allHours = [];\r\n  let startDay = [];\r\n  let chartData = [];\r\n  data.forEach((item) => {\r\n    return (\r\n      (datesFullList = [...datesFullList, { x: new Date(item.date), y: 1 }]),\r\n      (allMonths = [...allMonths, moment(new Date(item.date)).format(\"M-YY\")]),\r\n      (allDays = [...allDays, moment(new Date(item.date)).format(\"DD-MM-YY\")]),\r\n      (allHours = [\r\n        ...allHours,\r\n        moment(new Date(item.date)).format(\"DD-MM-YY-hA\"),\r\n      ]),\r\n      (startDay = [...startDay, new Date(item.date)])\r\n    );\r\n  });\r\n\r\n  let uniqMonths = [];\r\n  allMonths.map((item, index) => {\r\n    if (allMonths.indexOf(item) === index) {\r\n      return (uniqMonths = [\r\n        ...uniqMonths,\r\n        { x: datesFullList[index].x, y: 1 },\r\n      ]);\r\n    } else {\r\n      uniqMonths.find((element, i) => {\r\n        let el = moment(new Date(element.x)).format(\"M-YY\");\r\n\r\n        if (el === item) {\r\n          return (uniqMonths[i] = {\r\n            x: datesFullList[index].x,\r\n            y: element.y + 1,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  let uniqDates = [];\r\n\r\n  allDays.map((item, index) => {\r\n    if (allDays.indexOf(item) === index) {\r\n      return (uniqDates = [...uniqDates, { x: datesFullList[index].x, y: 1 }]);\r\n    } else {\r\n      uniqDates.find((element, i) => {\r\n        let el = moment(new Date(element.x)).format(\"DD-MM-YY\");\r\n\r\n        if (el === item) {\r\n          return (uniqDates[i] = {\r\n            x: datesFullList[index].x,\r\n            y: element.y + 1,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  let uniqHours = [];\r\n  allHours.map((item, index) => {\r\n    if (allHours.indexOf(item) === index) {\r\n      return (uniqHours = [...uniqHours, { x: datesFullList[index].x, y: 1 }]);\r\n    } else {\r\n      uniqHours.find((element, i) => {\r\n        let el = moment(new Date(element.x)).format(\"DD-MM-YY-hA\");\r\n        if (el === item) {\r\n          return (uniqHours[i] = {\r\n            x: datesFullList[index].x,\r\n            y: element.y + 1,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n  startDay = new Date(Math.min.apply(null, startDay));\r\n  chartData = {\r\n    allDays: [...datesFullList],\r\n    uniqMonths: [...uniqMonths],\r\n    uniqDates: [...uniqDates],\r\n    uniqHours: [...uniqHours],\r\n    startDay: startDay,\r\n  };\r\n\r\n  return chartData;\r\n}\r\n\r\nexport function getDougChartData(itemData) {\r\n  let a = 0;\r\n  itemData.map((item) => {\r\n    return (a = a + item.y);\r\n  });\r\n\r\n  return a;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport SelectChartStart from \"../../components/SelectChartStart/SelectChartStart\";\r\nimport Line from \"../../components/LineChart/Line\";\r\nimport Doughnut from \"../../components/DoughnutChart/Doughnut\";\r\nimport { getAllChartData, getDougChartData } from \"./functionsCharts\";\r\nimport styles from \"./Charts.module.css\";\r\n\r\nfunction Charts() {\r\n  const [ordersSubscData, setOrdersSubscData] = useState([]);\r\n  const [visitorsData, setVisitorsData] = useState([]);\r\n  const [dougChartData, setDougChartData] = useState();\r\n  const [daySelect, setSelectDay] = useState([]);\r\n  const [optionState, setOptionState] = useState([]);\r\n  const [cheCked, setChecked] = useState();\r\n\r\n  useEffect(() => {\r\n    initialData();\r\n  }, []);\r\n\r\n  function initialData() {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"dates.json\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((result) => {\r\n        ///////////////visitors chart data/////////////////////////////\r\n        let visitors = getAllChartData(result.data.visitors);\r\n        let today = new Date(\"2021-03-01 00:00:00\"); ////just for test, change to new Date()\r\n        setVisitorsData({\r\n          legend: false,\r\n          startDate: visitors.startDay,\r\n          standartStart: visitors.startDay,\r\n          maxDate: new Date(moment(today)),\r\n          datasets: [\r\n            {\r\n              data: visitors.uniqMonths,\r\n            },\r\n          ],\r\n        });\r\n        ///////////////orders chart data/////////////////////////////\r\n        let orders = getAllChartData(result.data.orders);\r\n\r\n        ///////////////subscriptions chart data/////////////////////////////\r\n        let subscriptions = getAllChartData(result.data.subscriptions);\r\n        let OrdersSubscStartDay = new Date(\r\n          Math.min.apply(null, [orders.startDay, subscriptions.startDay])\r\n        );\r\n\r\n        /////multi chart///////\r\n        setOrdersSubscData({\r\n          legend: true,\r\n          startDate: OrdersSubscStartDay,\r\n          standartStart: OrdersSubscStartDay,\r\n          maxDate: new Date(moment(today)),\r\n          datasets: [\r\n            {\r\n              label: \"Subscriptions\",\r\n              data: subscriptions.uniqMonths,\r\n            },\r\n            {\r\n              label: \"Orders\",\r\n              data: orders.uniqMonths,\r\n            },\r\n          ],\r\n        });\r\n\r\n        setChecked(\"standart\");\r\n\r\n        setDougChartData({\r\n          data: {\r\n            labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  getDougChartData(visitors.uniqMonths),\r\n                  getDougChartData(orders.uniqMonths),\r\n                  getDougChartData(subscriptions.uniqMonths),\r\n                ],\r\n\r\n                backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n                hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              },\r\n            ],\r\n          },\r\n        });\r\n\r\n        setOptionState({\r\n          visitors: {\r\n            allDays: [...visitors.allDays],\r\n            dataDays: [...visitors.uniqDates],\r\n            dataMonth: [...visitors.uniqMonths],\r\n            dataHour: [...visitors.uniqHours],\r\n          },\r\n          orders: {\r\n            allDays: [...orders.allDays],\r\n            dataDays: [...orders.uniqDates],\r\n            dataMonth: [...orders.uniqMonths],\r\n            dataHour: [...orders.uniqHours],\r\n          },\r\n          subscriptions: {\r\n            allDays: [...subscriptions.allDays],\r\n            dataDays: [...subscriptions.uniqDates],\r\n            dataMonth: [...subscriptions.uniqMonths],\r\n            dataHour: [...subscriptions.uniqHours],\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.error(error);\r\n      });\r\n\r\n    let today = new Date(\"2021-02-17 00:00:00\"); // fixed just for testing, use new Date();\r\n    let thisMonth = new Date(moment(today).startOf(\"month\")); // fixed just for testing, use new moment();\r\n    let lastMonth = new Date(\r\n      moment(today).subtract(1, \"months\").startOf(\"month\")\r\n    );\r\n\r\n    let thisWeek = new Date(moment(today).startOf(\"isoweek\"));\r\n    let thisYear = new Date(moment(today).startOf(\"year\"));\r\n\r\n    let lastYear = new Date(moment(today).subtract(1, \"year\").startOf(\"year\"));\r\n\r\n    setSelectDay({\r\n      unit: \"month\",\r\n      today: new Date(moment(today).startOf(\"day\")),\r\n      thisWeek: thisWeek,\r\n      thisMonth: thisMonth,\r\n      lastMonth: lastMonth,\r\n      thisYear: thisYear,\r\n      lastYear: lastYear,\r\n    });\r\n  }\r\n  const newStartDay = (checked) => {\r\n    function getNewDays(selectedDay, maxDay) {\r\n      let newDays = [];\r\n      return (newDays = {\r\n        newDaysVisitors: optionState.visitors.allDays.filter(\r\n          (item) => item.x >= selectedDay && item.x <= maxDay\r\n        ),\r\n\r\n        newDaysOrders: optionState.orders.allDays.filter(\r\n          (item) => item.x >= selectedDay && item.x <= maxDay\r\n        ),\r\n        newDaysSubscriptions: optionState.subscriptions.allDays.filter(\r\n          (item) => item.x >= selectedDay && item.x <= maxDay\r\n        ),\r\n      });\r\n    }\r\n    function getNewData(name, selectedDay, maxDay) {\r\n      let newDays = name;\r\n      newDays = newDays.filter(\r\n        (item) => item.x >= selectedDay && item.x <= maxDay\r\n      );\r\n\r\n      return newDays;\r\n    }\r\n    if (checked === \"day\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"hour\",\r\n      });\r\n\r\n      let newDays = getNewDays(\r\n        daySelect.today,\r\n        new Date(moment(daySelect.today).endOf(\"day\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.today,\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"day\")),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataHour,\r\n              daySelect.today,\r\n              new Date(moment(daySelect.today).endOf(\"day\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.today,\r\n\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"day\")),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataHour,\r\n              daySelect.today,\r\n              new Date(moment(daySelect.today).endOf(\"day\"))\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataHour,\r\n              daySelect.today,\r\n              new Date(moment(daySelect.today).endOf(\"day\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"week\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"day\",\r\n      });\r\n      let newDays = getNewDays(\r\n        daySelect.thisWeek,\r\n        new Date(moment(daySelect.today).endOf(\"isoweek\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.thisWeek,\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"isoweek\")),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataDays,\r\n              daySelect.thisWeek,\r\n              new Date(moment(daySelect.today).endOf(\"isoweek\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.thisWeek,\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"isoweek\")),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataDays,\r\n              daySelect.thisWeek,\r\n              new Date(moment(daySelect.today).endOf(\"isoweek\"))\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataDays,\r\n              daySelect.thisWeek,\r\n              new Date(moment(daySelect.today).endOf(\"isoweek\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"month\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"day\",\r\n      });\r\n\r\n      let newDays = getNewDays(\r\n        daySelect.thisMonth,\r\n        new Date(moment(daySelect.today).endOf(\"month\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.thisMonth,\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"month\")),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataDays,\r\n              daySelect.thisMonth,\r\n              new Date(moment(daySelect.today).endOf(\"month\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.thisMonth,\r\n        maxDate: new Date(moment(daySelect.today).endOf(\"month\")),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataDays,\r\n              daySelect.thisMonth,\r\n              new Date(moment(daySelect.today).endOf(\"month\"))\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataDays,\r\n              daySelect.thisMonth,\r\n              new Date(moment(daySelect.today).endOf(\"month\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"monthLast\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"day\",\r\n      });\r\n\r\n      let newDays = getNewDays(\r\n        daySelect.lastMonth,\r\n        new Date(moment(daySelect.today).subtract(1, \"months\").endOf(\"month\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.lastMonth,\r\n        maxDate: new Date(\r\n          moment(daySelect.today).subtract(1, \"months\").endOf(\"month\")\r\n        ),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataDays,\r\n              daySelect.lastMonth,\r\n              new Date(\r\n                moment(daySelect.today).subtract(1, \"months\").endOf(\"month\")\r\n              )\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.lastMonth,\r\n        maxDate: new Date(\r\n          moment(daySelect.today).subtract(1, \"months\").endOf(\"month\")\r\n        ),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataDays,\r\n              daySelect.lastMonth,\r\n              new Date(\r\n                moment(daySelect.today).subtract(1, \"months\").endOf(\"month\")\r\n              )\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataDays,\r\n              daySelect.lastMonth,\r\n              new Date(\r\n                moment(daySelect.today).subtract(1, \"months\").endOf(\"month\")\r\n              )\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"year\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"month\",\r\n      });\r\n\r\n      let newDays = getNewDays(\r\n        daySelect.thisYear,\r\n        new Date(moment(daySelect.today).add(1, \"M\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.thisYear,\r\n        maxDate: new Date(moment(daySelect.today).add(1, \"M\")),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataMonth,\r\n              daySelect.thisYear,\r\n              new Date(moment(daySelect.today).add(1, \"M\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.thisYear,\r\n        maxDate: new Date(moment(daySelect.today).add(1, \"M\")),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataMonth,\r\n              daySelect.thisYear,\r\n              new Date(moment(daySelect.today).add(1, \"M\"))\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataMonth,\r\n              daySelect.thisYear,\r\n              new Date(moment(daySelect.today).add(1, \"M\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"yearLast\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"month\",\r\n      });\r\n\r\n      let newDays = getNewDays(\r\n        daySelect.lastYear,\r\n        new Date(moment(daySelect.lastYear).endOf(\"year\"))\r\n      );\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: daySelect.lastYear,\r\n\r\n        maxDate: new Date(moment(daySelect.lastYear).endOf(\"year\")),\r\n        datasets: [\r\n          {\r\n            data: getNewData(\r\n              optionState.visitors.dataMonth,\r\n              daySelect.lastYear,\r\n              new Date(moment(daySelect.lastYear).endOf(\"year\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: daySelect.lastYear,\r\n\r\n        maxDate: new Date(moment(daySelect.lastYear).endOf(\"year\")),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: getNewData(\r\n              optionState.subscriptions.dataMonth,\r\n              daySelect.lastYear,\r\n              new Date(moment(daySelect.lastYear).endOf(\"year\"))\r\n            ),\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: getNewData(\r\n              optionState.orders.dataMonth,\r\n              daySelect.lastYear,\r\n              new Date(moment(daySelect.lastYear).endOf(\"year\"))\r\n            ),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(newDays.newDaysVisitors),\r\n                getDougChartData(newDays.newDaysOrders),\r\n\r\n                getDougChartData(newDays.newDaysSubscriptions),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    } else if (checked === \"standart\") {\r\n      setSelectDay({\r\n        ...daySelect,\r\n        unit: \"month\",\r\n      });\r\n\r\n      setVisitorsData({\r\n        ...visitorsData,\r\n        startDate: visitorsData.standartStart,\r\n        maxDate: new Date(moment(daySelect.today)),\r\n        datasets: [\r\n          {\r\n            data: optionState.visitors.dataMonth,\r\n          },\r\n        ],\r\n      });\r\n      setOrdersSubscData({\r\n        ...ordersSubscData,\r\n        startDate: ordersSubscData.standartStart,\r\n        maxDate: new Date(moment(daySelect.today)),\r\n\r\n        datasets: [\r\n          {\r\n            label: \"Subscriptions\",\r\n            data: optionState.subscriptions.dataMonth,\r\n          },\r\n          {\r\n            label: \"Orders\",\r\n            data: optionState.orders.dataMonth,\r\n          },\r\n        ],\r\n      });\r\n\r\n      setDougChartData({\r\n        data: {\r\n          labels: [\"Visitors\", \"Orders\", \"Subscriptions\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                getDougChartData(optionState.visitors.dataMonth),\r\n                getDougChartData(optionState.orders.dataMonth),\r\n\r\n                getDougChartData(optionState.subscriptions.dataMonth),\r\n              ],\r\n              backgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n              hoverBackgroundColor: [\"cyan\", \"#80c342\", \"#d1d859\"],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapperCharts}>\r\n      <div className={styles.optionsChart}>\r\n        <div className={styles.ChartSelect}>\r\n          <SelectChartStart\r\n            value={cheCked}\r\n            onChange={(e) => {\r\n              setChecked(e.target.value);\r\n\r\n              newStartDay(e.target.value);\r\n            }}\r\n          />\r\n          <div>Today: {moment(daySelect.today).format(\"MMM Do YY\")}</div>\r\n        </div>\r\n      </div>\r\n      <div className={styles.leftChartsColumn}>\r\n        {visitorsData && visitorsData.startDate && (\r\n          <Line\r\n            id=\"visitors\"\r\n            stepSize={3}\r\n            unit={daySelect.unit}\r\n            legend={visitorsData.legend}\r\n            start={new Date(visitorsData.startDate)}\r\n            maxDate={visitorsData.maxDate}\r\n            data={visitorsData}\r\n            title={\"Visitors\"}\r\n            colors={[\"rgb(0, 255, 255)\"]}\r\n            gradient={[\"rgba(0, 255, 255,0)\"]}\r\n          />\r\n        )}\r\n        {ordersSubscData && ordersSubscData.startDate && (\r\n          <Line\r\n            id=\"multi\"\r\n            stepSize={3}\r\n            unit={daySelect.unit}\r\n            legend={ordersSubscData.legend}\r\n            start={new Date(ordersSubscData.startDate)}\r\n            maxDate={ordersSubscData.maxDate}\r\n            data={ordersSubscData}\r\n            title={\"Multi Data\"}\r\n            colors={[\"rgb(209, 216, 89)\", \"rgb(128, 195, 66)\"]}\r\n            gradient={[\"rgba(209, 216, 89,0)\", \"rgba(128, 195, 66,0)\"]}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={styles.rightChartsColumn}>\r\n        {dougChartData && (\r\n          <Doughnut id=\"doughnut\" data={dougChartData.data} title=\"Total\" />\r\n        )}\r\n        <div className={styles.lastEventsWrapper}>\r\n          <div className={styles.lastEvents}>\r\n            {optionState &&\r\n              optionState.visitors &&\r\n              optionState.visitors.allDays\r\n                .slice(0)\r\n                .reverse()\r\n                .map((item, index) => {\r\n                  return index < 3 ? (\r\n                    <p className={styles.lastEventsPoint} key={index + \"V\"}>\r\n                      <span className={styles.lastEventsPointV}></span>{\" \"}\r\n                      {moment(item.x).format(\"DD MMMM YYYY' hA\")}\r\n                    </p>\r\n                  ) : null;\r\n                })}\r\n            {optionState &&\r\n              optionState.orders &&\r\n              optionState.orders.allDays\r\n                .slice(0)\r\n                .reverse()\r\n                .map((item, index) => {\r\n                  return index < 3 ? (\r\n                    <p className={styles.lastEventsPoint} key={index + \"O\"}>\r\n                      <span className={styles.lastEventsPointO}></span>{\" \"}\r\n                      {moment(item.x).format(\"DD MMMM YYYY' hA\")}\r\n                    </p>\r\n                  ) : null;\r\n                })}\r\n            {optionState &&\r\n              optionState.subscriptions &&\r\n              optionState.subscriptions.allDays\r\n                .slice(0)\r\n                .reverse()\r\n                .map((item, index) => {\r\n                  return index < 3 ? (\r\n                    <p className={styles.lastEventsPoint} key={index + \"S\"}>\r\n                      <span className={styles.lastEventsPointS}></span>{\" \"}\r\n                      {moment(item.x).format(\"DD MMMM YYYY' hA\")}\r\n                    </p>\r\n                  ) : null;\r\n                })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React from \"react\";\nimport Charts from \"./pages/Charts/Charts\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Charts />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}